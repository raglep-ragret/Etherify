/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type EtherifyTrackStruct = {
  addr: string;
  id: BigNumberish;
  spotifyLink: string;
};

export type EtherifyTrackStructOutput = [string, BigNumber, string] & {
  addr: string;
  id: BigNumber;
  spotifyLink: string;
};

export interface EtherifyPlaylistInterface extends ethers.utils.Interface {
  functions: {
    "addTrack(string)": FunctionFragment;
    "getLikes(uint256)": FunctionFragment;
    "getPlaylist()": FunctionFragment;
    "getTotalTracks()": FunctionFragment;
    "getTracksByAddress(address)": FunctionFragment;
    "likeTrack(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addTrack", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlaylist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTracks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTracksByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "likeTrack",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addTrack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLikes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlaylist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTracks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTracksByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likeTrack", data: BytesLike): Result;

  events: {};
}

export interface EtherifyPlaylist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EtherifyPlaylistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTrack(
      trackToAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLikes(
      trackId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlaylist(
      overrides?: CallOverrides
    ): Promise<[EtherifyTrackStructOutput[]]>;

    getTotalTracks(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTracksByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[EtherifyTrackStructOutput[]]>;

    likeTrack(
      trackId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTrack(
    trackToAdd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLikes(
    trackId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlaylist(overrides?: CallOverrides): Promise<EtherifyTrackStructOutput[]>;

  getTotalTracks(overrides?: CallOverrides): Promise<BigNumber>;

  getTracksByAddress(
    addr: string,
    overrides?: CallOverrides
  ): Promise<EtherifyTrackStructOutput[]>;

  likeTrack(
    trackId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrack(trackToAdd: string, overrides?: CallOverrides): Promise<void>;

    getLikes(
      trackId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlaylist(
      overrides?: CallOverrides
    ): Promise<EtherifyTrackStructOutput[]>;

    getTotalTracks(overrides?: CallOverrides): Promise<BigNumber>;

    getTracksByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<EtherifyTrackStructOutput[]>;

    likeTrack(trackId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addTrack(
      trackToAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLikes(
      trackId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlaylist(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTracks(overrides?: CallOverrides): Promise<BigNumber>;

    getTracksByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    likeTrack(
      trackId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrack(
      trackToAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLikes(
      trackId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlaylist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalTracks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTracksByAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    likeTrack(
      trackId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
